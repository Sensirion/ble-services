/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the various sample types
 */
export interface SampleTypes {
  /**
   * Defines the version of the ble-dl-sample-types.yml file.
   */
  "file-version": string;
  /**
   * The list of defined BLE sample types used for downloading data.
   */
  "sample-types": {
    "sample-type": {
      /**
       * Name of the service
       */
      description: string;
      /**
       * The ID of the download sample.
       */
      id: {
        /**
         * 2-byte ID of the download sample type in big-endian byte order.
         *
         * @minItems 2
         * @maxItems 2
         */
        "sample-type": [string, string];
        [k: string]: unknown;
      };
      /**
       * Number of samples per packet
       */
      "samples-per-packet": number;
      /**
       * Additional notes about the sample type
       */
      notes?: string;
      /**
       * List of devices or sensors this sample type can be used for
       */
      "suitable-for"?: {
        /**
         * List of gadgets this sample type can be used for
         */
        gadgets?: string[];
        /**
         * List of sensors this sample type can be used for
         */
        sensors?: string[];
        [k: string]: unknown;
      };
      fields?: {
        /**
         * field definition
         */
        field: {
          /**
           * Name of the characteristic
           */
          name: string;
          description: string;
          /**
           * Byte position of this field within the sample type
           */
          "byte-offset": number;
          /**
           * Data type of the characteristic value
           */
          "data-type": string;
          /**
           * Additional notes about the sample type
           */
          notes?: string;
          /**
           * Conversion function or parameters to convert value into physical unit
           */
          conversion?: {
            formula?: string;
            /**
             * The offset of the linear conversion; this is supposed to be a number or a valid python expression
             */
            offset?: number | string;
            /**
             * The scale of the linear conversion; this is supposed to be a number or a valid python expression
             */
            scale?: number | string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        [k: string]: unknown;
      }[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
